---
description: 
globs: 
alwaysApply: true
---
rules:
  - name: AVMerkez
  - description: |
      Türkiye için Alışveriş Merkezi Rehber Uygulaması.
      Kullanıcıların Türkiye'deki AVM'leri, içindeki mağazaları,
      etkinlikleri, kampanyaları, kat planlarını ve diğer AVM hizmetlerini
      keşfetmelerini sağlayan bir platformdur.
      Backend Java Spring Boot ve microservice mimarisi kullanılarak geliştirilmektedir.
      Daima en son kararlı teknolojiler hedeflenir ve SOLID prensiplerine sıkı sıkıya bağlı kalınır.
      Proje, yeni özelliklerin eklenmesine daima açık olacak şekilde tasarlanmalıdır.
  - language: Java
  - framework: Spring Boot (Her zaman en son kararlı sürüm hedeflenir)
  - architecture: |
      Microservice Mimarisi.
      Her mikroservis kendi iş alanından sorumlu olacaktır (Örn: AVM Servisi, Mağaza Servisi, Kullanıcı Servisi, Yorum Servisi vb.).
      Servisler arası iletişim için RESTful API'lar (tercihen senkron) veya mesajlaşma kuyrukları (örn: RabbitMQ/Kafka - asenkron ihtiyaçlar için) kullanılacaktır.
      API Gateway (örn: Spring Cloud Gateway) kullanılarak dış dünyaya tek bir giriş noktası sağlanacaktır.
      Service Discovery (örn: Eureka, Consul) ve merkezi konfigürasyon yönetimi (örn: Spring Cloud Config) kullanılacaktır.
  - principles:
      - SOLID prensiplerine tam uyum (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion).
      - Temiz Kod (Clean Code) ve etkili tasarım desenleri (Design Patterns).
      - Yüksek birim (unit) ve entegrasyon (integration) testi kapsamı (JUnit 5, Mockito, Testcontainers).
      - Genişletilebilirliğe ve bakıma uygunluk (Extensibility & Maintainability).
      - Anlaşılır ve tutarlı isimlendirme kuralları (Java Naming Conventions). Kod değişkenleri, metot isimleri İngilizce olmalıdır.
      - Bağımlılık Enjeksiyonu (Dependency Injection) prensibinin etkin kullanımı (Spring IoC).
      - Güvenlik (Spring Security) en başından itibaren düşünülmelidir (Authentication, Authorization).
      - DRY (Don't Repeat Yourself) ve KISS (Keep It Simple, Stupid) prensiplerine dikkat edilmelidir.
      - Verimli veritabanı kullanımı ve sorgu optimizasyonu.
  - domain: |
      Ana varlıklar (Entities) ve kavramlar:
      - AlisverisMerkezi (AVM): id, ad, adres, sehir, ilce, konum (latitude, longitude), calismaSaatleri, webSitesi, telefon, hizmetler (otopark, wifi, bebekOdasi vb.), katPlanlari (URL veya dosya referansı), popülerlikSkoru.
      - Magaza (Store): id, ad, avmId, kat, magazaNo, kategoriId, markaId, iletisimBilgileri, aciklama, logosu.
      - Kategori (Category): id, ad (Giyim, Elektronik, Yeme-İçme, Hizmet, Süpermarket vb.), üstKategoriId (hiyerarşi için).
      - Marka (Brand): id, ad, logoUrl, webSitesi.
      - Etkinlik (Event): id, ad, avmId, baslangicTarihi, bitisTarihi, aciklama, konumAciklamasi (örn: Zemin Kat Etkinlik Alanı), kategori (Konser, İmza Günü, Çocuk Etkinliği vb.).
      - Kampanya (Campaign): id, ad, aciklama, baslangicTarihi, bitisTarihi, magazaId (opsiyonel), avmId (opsiyonel), markaId (opsiyonel), indirimOrani/Turu, kosullar, kampanyaKodu (opsiyonel).
      - Kullanici (User): id, kullaniciAdi, email, sifre (hashlenmiş), ad, soyad, roller (USER, ADMIN, AVM_YONETICISI vb.), favoriAvmler, favoriMagazalar, kayıtTarihi.
      - Yorum (Review/Comment): id, kullaniciId, avmId (opsiyonel), magazaId (opsiyonel), puan (1-5), yorumMetni, olusturmaTarihi, onayDurumu (Admin onayı için).
      - Konum (Location): Enlem (Latitude) ve Boylam (Longitude) bilgileri. AVM ve kullanıcı konumu için kullanılabilir. Mesafe hesaplamaları için önemlidir.
      - Bildirim (Notification): Kullanıcılara yeni kampanya, etkinlik veya favorileriyle ilgili güncellemeleri iletmek için.
  - locale: tr-TR (Türkiye Türkçesi) - Uygulamanın hedef kitlesi ve coğrafyası Türkiye'dir. API yanıtları, loglar ve kullanıcı arayüzü metinleri (varsa) bu kültüre uygun olmalıdır. Ancak kodlama dili İngilizce kalacaktır.
  - tech_stack:
      - Java (En son LTS veya güncel kararlı sürüm)
      - Spring Boot (En son kararlı sürüm)
      - Spring Data JPA (Hibernate ile)
      - Spring Security
      - Spring Cloud (Gateway, Netflix Eureka/Consul, Config Server)
      - Maven veya Gradle (Proje bağımlılık ve derleme yöneticisi)
      - Veritabanı: PostgreSQL (varsayılan, GIS eklentisi ile konum işlemleri için ideal) veya MySQL. Her mikroservis kendi veritabanına sahip olabilir.
      - Lombok (Kod tekrarını azaltmak için)
      - MapStruct (DTO - Entity dönüşümleri için, performansı ön planda tutar)
      - JUnit 5, Mockito, AssertJ, Testcontainers (Test kütüphaneleri)
      - RESTful API (JSON tabanlı)
      - Docker / Docker Compose (Yerel geliştirme, test ve deployment ortamlarını standartlaştırmak için)
      - CI/CD: Jenkins, GitLab CI veya GitHub Actions (Otomatik derleme, test ve dağıtım süreçleri için)
      - Loglama: SLF4J ve Logback/Log4j2 (Merkezi loglama sistemi - ELK Stack veya benzeri - düşünülebilir)
      - Caching: Redis veya Hazelcast (Performans artışı için)
      - Mesajlaşma: RabbitMQ veya Kafka (Asenkron işlemler ve servisler arası event-driven iletişim için)
      - Opsiyonel: Elasticsearch (Gelişmiş arama ve filtreleme yetenekleri için)
  - api_style: |
      RESTful API (JSON formatında).
      Anlaşılır endpoint (URL) yapıları kullanılmalıdır (örn: /api/v1/malls, /api/v1/malls/{mallId}/stores).
      HTTP metodları (GET, POST, PUT, DELETE, PATCH) doğru amaçlarla kullanılmalıdır.
      Hata yönetimi için standart HTTP durum kodları ve anlaşılır hata mesajları içeren bir yapı kullanılmalıdır.
      API versiyonlaması (örn: /api/v1/...) baştan planlanmalıdır.
      DTO (Data Transfer Object) katmanı kullanılmalı, içsel entity yapıları doğrudan dışarıya açılmamalıdır.
      HATEOAS prensiplerinin uygulanması değerlendirilebilir (İlişkili kaynaklara linkler sunmak).
  - other:
      - Kod içinde (değişken, metot, sınıf isimleri vb.) kesinlikle İngilizce kullanılacaktır. Türkçe karakterlerden kaçınılacaktır. Yorum satırlarında veya konfigürasyon dosyalarındaki açıklamalarda Türkçe kullanılabilir.
      - Konfigürasyonlar (veritabanı bağlantısı, API anahtarları, servis URL'leri vb.) `application.yml` (veya `.properties`) dosyalarında ve ortam değişkenlerinde (environment variables) veya Spring Cloud Config Server üzerinden yönetilmelidir. Hassas bilgiler kod içine gömülmemelidir.
      - Loglama detaylı, anlamlı ve yapılandırılmış (structured logging) olmalıdır. İstek takibi için Correlation ID gibi mekanizmalar kullanılabilir.

      - Global Exception Handling mekanizması implemente edilmelidir.