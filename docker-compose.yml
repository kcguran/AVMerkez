version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - avmerkez-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mall_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Discovery Server (Eureka)
  discovery-server:
    build: ./discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - avmerkez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Config Server
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - ./avmerkez-config-repo:/config
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
    depends_on:
      discovery-server:
        condition: service_healthy
    networks:
      - avmerkez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_CLOUD_CONFIG_FAIL_FAST=true
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - avmerkez-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 20
      start_period: 100s

  # Mall Service
  mall-service:
    image: eclipse-temurin:17-jdk
    container_name: mall-service
    ports:
      - "9090:9090"
    command: echo "Mall Service placeholder - service will be implemented later"
    depends_on:
      - postgres
    networks:
      - avmerkez-network

  # Store Service
  store-service:
    image: eclipse-temurin:17-jdk
    container_name: store-service
    ports:
      - "9091:9091"
    command: echo "Store Service placeholder - service will be implemented later"
    depends_on:
      - postgres
    networks:
      - avmerkez-network

  # User Service
  user-service:
    image: eclipse-temurin:17-jdk
    container_name: user-service
    ports:
      - "8083:8083"
    command: echo "User Service placeholder - service will be implemented later"
    depends_on:
      - postgres
    networks:
      - avmerkez-network

  review-service:
    image: eclipse-temurin:17-jdk
    container_name: review-service
    ports:
      - "8085:8085"
    command: echo "Review Service placeholder - service will be implemented later"
    depends_on:
      - postgres
    networks:
      - avmerkez-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    networks:
      - avmerkez-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - avmerkez-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - avmerkez-network

  search-service:
    image: eclipse-temurin:17-jdk
    container_name: search-service
    ports:
      - "8086:8086"
    command: echo "Search Service placeholder - service will be implemented later"
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - avmerkez-network

  # Redis for Rate Limiting
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - avmerkez-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

# Volumes Definition
volumes:
  postgres_data:
    driver: local

# Networks Definition
networks:
  avmerkez-network:
    driver: bridge 